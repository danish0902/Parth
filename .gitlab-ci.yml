stages:
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: "myapp"
  IMAGE_TAG: "$CI_COMMIT_SHA"

# Test stage
test_job:
  stage: test
  image: python:3.9-slim
  script:
    - pip install flake8 pytest flask requests
    - flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
    - python test_app.py -v
  only:
    - merge_requests
    - main
    - develop

# Build stage
build_job:
  stage: build
  image: quay.io/podman/stable
  services:
    - docker:dind
  script:
    - podman build -t $IMAGE_NAME:$IMAGE_TAG .
    - podman build -t $IMAGE_NAME:latest .
    
    # Test the containerized web service
    - podman run -d --name test-container -p 8082:80 $IMAGE_NAME:latest
    - sleep 5
    - curl -f http://localhost:8082/ || (podman logs test-container && exit 1)
    - curl -f http://localhost:8082/health || (podman logs test-container && exit 1)
    - podman stop test-container
    - podman rm test-container
    
    - podman save $IMAGE_NAME:latest -o myapp-image.tar
  artifacts:
    paths:
      - myapp-image.tar
    expire_in: 1 day
  only:
    - main
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  image: quay.io/podman/stable
  script:
    - podman load -i myapp-image.tar
    
    # Stop existing container if running
    - podman stop myapp-staging 2>/dev/null || true
    - podman rm myapp-staging 2>/dev/null || true
    
    # Start new container
    - podman run -d --name myapp-staging -p 8081:80 $IMAGE_NAME:latest
    
    # Wait and verify deployment
    - sleep 5
    - curl -f http://localhost:8081/ || (podman logs myapp-staging && exit 1)
    - curl -f http://localhost:8081/health || (podman logs myapp-staging && exit 1)
    
    - echo "Deployed to staging environment"
  environment:
    name: staging
    url: http://staging.example.com:8081
  only:
    - merge_requests

# Deploy to production
deploy_production:
  stage: deploy
  image: quay.io/podman/stable
  script:
    - podman load -i myapp-image.tar
    
    # Stop existing container if running
    - podman stop myapp-prod 2>/dev/null || true
    - podman rm myapp-prod 2>/dev/null || true
    
    # Start new container
    - podman run -d --name myapp-prod -p 8080:80 $IMAGE_NAME:latest
    
    # Wait and verify deployment
    - sleep 5
    - curl -f http://localhost:8080/ || (podman logs myapp-prod && exit 1)
    - curl -f http://localhost:8080/health || (podman logs myapp-prod && exit 1)
    
    - echo "Deployed to production environment"
  environment:
    name: production
    url: http://production.example.com:8080
  when: manual
  only:
    - main