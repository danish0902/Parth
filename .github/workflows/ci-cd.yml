name: CI/CD Pipeline with Podman

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest flake8 flask requests
    
    - name: Lint with flake8
      run: |
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run unit tests
      run: |
        python test_app.py -v
    
    - name: Test Python app
      run: |
        python app.py

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
    
    - name: Build image with Podman
      run: |
        podman build -t myapp:${{ github.sha }} .
        podman build -t myapp:latest .
    
    - name: Test container
      run: |
        # Start container in background
        podman run -d --name test-container -p 8082:80 myapp:latest
        
        # Wait for container to be ready
        sleep 5
        
        # Test if service is responding
        curl -f http://localhost:8082/ || (podman logs test-container && exit 1)
        curl -f http://localhost:8082/health || (podman logs test-container && exit 1)
        
        # Clean up
        podman stop test-container
        podman rm test-container
    
    - name: Save image (artifact)
      run: |
        podman save myapp:latest -o myapp-image.tar
    
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: container-image
        path: myapp-image.tar

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: container-image
    
    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
    
    - name: Load and deploy to staging
      run: |
        podman load -i myapp-image.tar
        
        # Stop existing container if running
        podman stop myapp-staging 2>/dev/null || true
        podman rm myapp-staging 2>/dev/null || true
        
        # Start new container
        podman run -d --name myapp-staging -p 8081:80 myapp:latest
        
        # Wait for container to be ready
        sleep 5
        
        # Verify deployment
        curl -f http://localhost:8081/ || (podman logs myapp-staging && exit 1)
        curl -f http://localhost:8081/health || (podman logs myapp-staging && exit 1)
        
        echo "Deployed to staging environment"
        echo "Service is running at http://localhost:8081"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: container-image
    
    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
    
    - name: Load and deploy to production
      run: |
        podman load -i myapp-image.tar
        
        # Stop existing container if running
        podman stop myapp-prod 2>/dev/null || true
        podman rm myapp-prod 2>/dev/null || true
        
        # Start new container
        podman run -d --name myapp-prod -p 8080:80 myapp:latest
        
        # Wait for container to be ready
        sleep 5
        
        # Verify deployment
        curl -f http://localhost:8080/ || (podman logs myapp-prod && exit 1)
        curl -f http://localhost:8080/health || (podman logs myapp-prod && exit 1)
        
        echo "Deployed to production environment"
        echo "Service is running at http://localhost:8080"